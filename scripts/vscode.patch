diff --git a/.eslintrc.json b/.eslintrc.json
index 7e6b386b804..4457e204d51 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -253,6 +253,7 @@
 							"v8-inspect-profiler",
 							"vscode-regexpp",
 							"vscode-textmate",
+							"vscode-oniguruma",
 							"worker_threads",
 							"xterm",
 							"xterm-addon-canvas",
diff --git a/build/lib/standalone.js b/build/lib/standalone.js
index 38be1131300..52c3b2b0a82 100644
--- a/build/lib/standalone.js
+++ b/build/lib/standalone.js
@@ -150,6 +150,9 @@ function createESMSourcesAndResources2(options) {
             const info = ts.preProcessFile(fileContents);
             for (let i = info.importedFiles.length - 1; i >= 0; i--) {
                 const importedFilename = info.importedFiles[i].fileName;
+                if (!importedFilename.startsWith('vs/')) {
+                    continue;
+                }
                 const pos = info.importedFiles[i].pos;
                 const end = info.importedFiles[i].end;
                 let importedFilepath;
@@ -172,6 +175,10 @@ function createESMSourcesAndResources2(options) {
                 else {
                     relativePath = path.relative(path.dirname(file), importedFilepath);
                 }
+                if (relativePath.endsWith('..')) {
+                    // When a folder have the same name as a file
+                    relativePath = relativePath + '/../' + path.basename(importedFilepath);
+                }
                 relativePath = relativePath.replace(/\\/g, '/');
                 if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
                     relativePath = './' + relativePath;
@@ -318,4 +325,4 @@ function transportCSS(module, enqueue, write) {
         return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;
     }
 }
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/build/lib/standalone.ts b/build/lib/standalone.ts
index 775a1be5996..ce8435bd920 100644
--- a/build/lib/standalone.ts
+++ b/build/lib/standalone.ts
@@ -180,6 +180,9 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 
 			for (let i = info.importedFiles.length - 1; i >= 0; i--) {
 				const importedFilename = info.importedFiles[i].fileName;
+				if (!importedFilename.startsWith('vs/')) {
+					continue;
+				}
 				const pos = info.importedFiles[i].pos;
 				const end = info.importedFiles[i].end;
 
@@ -201,6 +204,10 @@ export function createESMSourcesAndResources2(options: IOptions2): void {
 				} else {
 					relativePath = path.relative(path.dirname(file), importedFilepath);
 				}
+				if (relativePath.endsWith('..')) {
+					// When a folder have the same name as a file
+					relativePath = relativePath + '/../' + path.basename(importedFilepath);
+				}
 				relativePath = relativePath.replace(/\\/g, '/');
 				if (!/(^\.\/)|(^\.\.\/)/.test(relativePath)) {
 					relativePath = './' + relativePath;
diff --git a/extensions/typescript-language-features/web/webServer.ts b/extensions/typescript-language-features/web/webServer.ts
index 0363202f334..2fe5124bad7 100644
--- a/extensions/typescript-language-features/web/webServer.ts
+++ b/extensions/typescript-language-features/web/webServer.ts
@@ -44,7 +44,7 @@ function fromResource(extensionUri: URI, uri: URI) {
 		&& uri.path.endsWith('.d.ts')) {
 		return uri.path;
 	}
-	return `/${uri.scheme}/${uri.authority}${uri.path}`;
+	return `/${uri.scheme}/${uri.authority || 'ts-nul-authority'}${uri.path}`;
 }
 function updateWatch(event: 'create' | 'change' | 'delete', uri: URI, extensionUri: URI) {
 	const kind = event === 'create' ? ts.FileWatcherEventKind.Created
@@ -415,7 +415,7 @@ function createServerHost(extensionUri: URI, logger: ts.server.Logger, apiClient
 			return URI.from({
 				scheme: extensionUri.scheme,
 				authority: extensionUri.authority,
-				path: extensionUri.path + '/dist/browser/typescript/' + filepath.slice(1)
+				path: extensionUri.path.replace(/\/$/, '') + '/dist/browser/typescript/' + filepath.slice(1)
 			});
 		}
 
diff --git a/src/vs/base/browser/defaultWorkerFactory.ts b/src/vs/base/browser/defaultWorkerFactory.ts
index 9cab3604196..b27fc0eb96d 100644
--- a/src/vs/base/browser/defaultWorkerFactory.ts
+++ b/src/vs/base/browser/defaultWorkerFactory.ts
@@ -4,7 +4,9 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';
+// ESM-comment-begin
 import { COI } from 'vs/base/common/network';
+// ESM-comment-end
 import { IWorker, IWorkerCallback, IWorkerFactory, logOnceWebWorkerWarning } from 'vs/base/common/worker/simpleWorker';
 
 const ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });
diff --git a/src/vs/base/common/network.ts b/src/vs/base/common/network.ts
index ab7e3a18dc5..7fc528ab54b 100644
--- a/src/vs/base/common/network.ts
+++ b/src/vs/base/common/network.ts
@@ -202,7 +202,7 @@ class FileAccessImpl {
 	 * **Note:** use `dom.ts#asCSSUrl` whenever the URL is to be used in CSS context.
 	 */
 	asBrowserUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, (window as any).monacoRequire);
 		return this.uriToBrowserUri(uri);
 	}
 
@@ -249,7 +249,7 @@ class FileAccessImpl {
 	 * is responsible for loading.
 	 */
 	asFileUri(resourcePath: AppResourcePath | ''): URI {
-		const uri = this.toUri(resourcePath, require);
+		const uri = this.toUri(resourcePath, (window as any).monacoRequire);
 		return this.uriToFileUri(uri);
 	}
 
diff --git a/src/vs/base/common/performance.js b/src/vs/base/common/performance.js
index aff4d0734de..ea43e4a2fcc 100644
--- a/src/vs/base/common/performance.js
+++ b/src/vs/base/common/performance.js
@@ -6,7 +6,7 @@
 'use strict';
 
 //@ts-check
-
+// ESM-comment-begin
 (function () {
 
 	/**
@@ -123,3 +123,27 @@
 	}
 
 })();
+// ESM-comment-end
+
+// ESM-uncomment-begin
+// export const mark = (name) => {
+// 	performance.mark(name);
+// };
+
+// export const getMarks = () => {
+// 	let timeOrigin = performance.timeOrigin;
+// 	if (typeof timeOrigin !== 'number') {
+// 		// safari: there is no timerOrigin but in renderers there is the timing-property
+// 		// see https://bugs.webkit.org/show_bug.cgi?id=174862
+// 		timeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;
+// 	}
+// 	const result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];
+// 	for (const entry of performance.getEntriesByType('mark')) {
+// 		result.push({
+// 			name: entry.name,
+// 			startTime: Math.round(timeOrigin + entry.startTime)
+// 		});
+// 	}
+// 	return result;
+// };
+// ESM-uncomment-end
diff --git a/src/vs/editor/browser/config/editorConfiguration.ts b/src/vs/editor/browser/config/editorConfiguration.ts
index fc197da1d57..a4d9573979f 100644
--- a/src/vs/editor/browser/config/editorConfiguration.ts
+++ b/src/vs/editor/browser/config/editorConfiguration.ts
@@ -269,7 +269,7 @@ export class ComputedEditorOptions implements IComputedEditorOptions {
 	}
 }
 
-class EditorOptionsUtil {
+export class EditorOptionsUtil {
 
 	public static validateOptions(options: IEditorOptions): ValidatedEditorOptions {
 		const result = new ValidatedEditorOptions();
diff --git a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
index 55e5013c812..1e7d271a466 100644
--- a/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/statusBarExtensionPoint.ts
@@ -49,7 +49,7 @@ export interface IExtensionStatusBarItemService {
 }
 
 
-class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
+export class ExtensionStatusBarItemService implements IExtensionStatusBarItemService {
 
 	declare readonly _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/api/common/extHostTerminalService.ts b/src/vs/workbench/api/common/extHostTerminalService.ts
index 6dabdb4f4df..e48cd4f2828 100644
--- a/src/vs/workbench/api/common/extHostTerminalService.ts
+++ b/src/vs/workbench/api/common/extHostTerminalService.ts
@@ -812,15 +812,12 @@ export abstract class BaseExtHostTerminalService extends Disposable implements I
 	}
 
 	private _getTerminalObjectIndexById<T extends ExtHostTerminal>(array: T[], id: ExtHostTerminalIdentifier): number | null {
-		let index: number | null = null;
-		array.some((item, i) => {
-			const thisId = item._id;
-			if (thisId === id) {
-				index = i;
-				return true;
-			}
-			return false;
+		const index = array.findIndex(item => {
+			return item._id === id;
 		});
+		if (index === -1) {
+			return null;
+		}
 		return index;
 	}
 
diff --git a/src/vs/workbench/browser/parts/compositeBar.ts b/src/vs/workbench/browser/parts/compositeBar.ts
index 36694129764..2920195c027 100644
--- a/src/vs/workbench/browser/parts/compositeBar.ts
+++ b/src/vs/workbench/browser/parts/compositeBar.ts
@@ -504,7 +504,7 @@ export class CompositeBar extends Widget implements ICompositeBar {
 				// Compute sizes only if visible. Otherwise the size measurment would be computed wrongly.
 				const currentItemsLength = compositeSwitcherBar.viewItems.length;
 				compositeSwitcherBar.push(items.map(composite => composite.activityAction));
-				items.map((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
+				items.forEach((composite, index) => this.compositeSizeInBar.set(composite.id, this.options.orientation === ActionsOrientation.VERTICAL
 					? compositeSwitcherBar.getHeight(currentItemsLength + index)
 					: compositeSwitcherBar.getWidth(currentItemsLength + index)
 				));
diff --git a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
index ff766b9acb8..599bab9dd59 100644
--- a/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
+++ b/src/vs/workbench/browser/parts/views/viewPaneContainer.ts
@@ -672,7 +672,7 @@ export class ViewPaneContainer extends Component implements IViewPaneContainer {
 		}
 
 		this.panes.filter(view => view.isVisible() !== visible)
-			.map((view) => view.setVisible(visible));
+			.forEach((view) => view.setVisible(visible));
 	}
 
 	isVisible(): boolean {
diff --git a/src/vs/workbench/contrib/output/common/outputChannelModel.ts b/src/vs/workbench/contrib/output/common/outputChannelModel.ts
index 88cc5df03cf..07926124b30 100644
--- a/src/vs/workbench/contrib/output/common/outputChannelModel.ts
+++ b/src/vs/workbench/contrib/output/common/outputChannelModel.ts
@@ -22,6 +22,7 @@ import { VSBuffer } from 'vs/base/common/buffer';
 import { ILogger, ILoggerService, ILogService } from 'vs/platform/log/common/log';
 import { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';
 import { OutputChannelUpdateMode } from 'vs/workbench/services/output/common/output';
+import { isCancellationError } from 'vs/base/common/errors';
 
 export interface IOutputChannelModel extends IDisposable {
 	readonly onDispose: Event<void>;
@@ -61,7 +62,11 @@ class OutputFileListener extends Disposable {
 
 	private poll(): void {
 		const loop = () => this.doWatch().then(() => this.poll());
-		this.syncDelayer.trigger(loop);
+		this.syncDelayer.trigger(loop).catch(error => {
+			if (!isCancellationError(error)) {
+				throw error;
+			}
+		});
 	}
 
 	private async doWatch(): Promise<void> {
@@ -206,7 +211,7 @@ export class FileOutputChannelModel extends Disposable implements IOutputChannel
 		this.doUpdateModel(model, [EditOperation.delete(model.getFullModelRange())], VSBuffer.fromString(''));
 	}
 
-	private async appendContent(model: ITextModel, immediate: boolean, token: CancellationToken): Promise<void> {
+	private appendContent(model: ITextModel, immediate: boolean, token: CancellationToken): void {
 		this.appendThrottler.trigger(async () => {
 			/* Abort if operation is cancelled */
 			if (token.isCancellationRequested) {
@@ -234,7 +239,11 @@ export class FileOutputChannelModel extends Disposable implements IOutputChannel
 			const lastLineMaxColumn = model.getLineMaxColumn(lastLine);
 			const edits = [EditOperation.insert(new Position(lastLine, lastLineMaxColumn), contentToAppend.toString())];
 			this.doUpdateModel(model, edits, contentToAppend);
-		}, immediate ? 0 : undefined);
+		}, immediate ? 0 : undefined).catch(error => {
+			if (!isCancellationError(error)) {
+				throw error;
+			}
+		});
 	}
 
 	private async replaceContent(model: ITextModel, token: CancellationToken): Promise<void> {
diff --git a/src/vs/workbench/services/outline/browser/outlineService.ts b/src/vs/workbench/services/outline/browser/outlineService.ts
index f4707432371..7c5cdde39cc 100644
--- a/src/vs/workbench/services/outline/browser/outlineService.ts
+++ b/src/vs/workbench/services/outline/browser/outlineService.ts
@@ -11,7 +11,7 @@ import { IEditorPane } from 'vs/workbench/common/editor';
 import { IOutline, IOutlineCreator, IOutlineService, OutlineTarget } from 'vs/workbench/services/outline/browser/outline';
 import { Event, Emitter } from 'vs/base/common/event';
 
-class OutlineService implements IOutlineService {
+export class OutlineService implements IOutlineService {
 
 	declare _serviceBrand: undefined;
 
diff --git a/src/vs/workbench/services/textMate/browser/worker/textMate.worker.ts b/src/vs/workbench/services/textMate/browser/worker/textMate.worker.ts
index 67484e6ef40..ef7cd478655 100644
--- a/src/vs/workbench/services/textMate/browser/worker/textMate.worker.ts
+++ b/src/vs/workbench/services/textMate/browser/worker/textMate.worker.ts
@@ -12,6 +12,8 @@ import { ICreateGrammarResult, TMGrammarFactory } from 'vs/workbench/services/te
 import { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';
 import { IOnigLib, IRawTheme } from 'vscode-textmate';
 import { TextMateWorkerModel } from './textMateWorkerModel';
+import * as vscodeTextmate from 'vscode-textmate';
+import * as vscodeOniguruma from 'vscode-oniguruma';
 
 export interface ICreateData {
 	grammarDefinitions: IValidGrammarDefinitionDTO[];
@@ -56,9 +58,6 @@ export class TextMateTokenizationWorker {
 	}
 
 	private async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): Promise<TMGrammarFactory> {
-		const uri = this.createData.textmateMainUri;
-		const vscodeTextmate = await import(uri);
-		const vscodeOniguruma = await import(this.createData.onigurumaMainUri);
 		const response = await fetch(this.createData.onigurumaWASMUri);
 
 		// Using the response directly only works if the server sets the MIME type 'application/wasm'.
